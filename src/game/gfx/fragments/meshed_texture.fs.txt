    // This is a fragment shader for a meshed chunk of voxels. The textures are sprites of 16x16 voxels
    // for 3 surfaces, top, sides and bottom stack down the texture. The mesh is scaled for a block type
    // into dimensions that increment the model space vertices via integers. To make the texture sprites
    // map and repeat correctly, the texture coordinates are scaled by the block type dimensions. This will
    // be done by reducing the fragPos to a 0-1 range, by removing the integer part of the position.
    // Then the texture coordinates will be manually interpolated by the fragPos. The texture is part of
    // a texture atlas.

    // `textColor`, `bl_surface_height` and `fragNormal` must predefined elsewhere.
    highp float surface_h = bl_surface_height;
    highp float surface_t = bl_surface_height * 2;
    highp float texture_start = surface_h * 3 * bl_block_index;
    float top_offset = 0.0009;
    if (bl_block_index == 0) {
        top_offset = 0;
    }
    float bot_offset = 0.00001;
    float threshold = 0.001;
    float bl_frag_x = fragPos.x + 0.5;
    float bl_frag_y = fragPos.y;
    float bl_frag_z = fragPos.z;
    if (abs(fragNormal.y) > 0.5) {
        // top or bottom of voxel
        if (fragNormal.y > 0) {
            textColor = texture(texture1, vec2(fract(bl_frag_x), (fract(bl_frag_z * -1.0) * surface_h) + texture_start + top_offset));
        } else {
            float tc_pre = fract(bl_frag_x) * surface_h;
            if (tc_pre < threshold) {
                tc_pre = threshold;
            }
            if (surface_h - tc_pre < threshold) {
                tc_pre = surface_h;
            }
            textColor = texture(texture1, vec2(fract((bl_frag_z + 0.5) * -1.0), tc_pre + surface_t + texture_start));
        }
    } else if (abs(fragNormal.x) > 0.5) {
        // side of voxel
        if (fragNormal.x > 0) {
            // right
            textColor = texture(texture1, vec2(fract(bl_frag_z), (fract(bl_frag_y * -1.0) * surface_h) + surface_h + texture_start));
        } else {
            // left
            textColor = texture(texture1, vec2(fract(bl_frag_z * -1.0), (fract(bl_frag_y * -1.0) * surface_h) + surface_h + texture_start));
        }
    } else {
        // front or back of voxel
        if (fragNormal.z > 0) {
            // front
            textColor = texture(texture1, vec2(fract(bl_frag_x * -1.0), (fract(bl_frag_y * -1.0) * surface_h) + surface_h + texture_start));
        } else {
            // back
            textColor = texture(texture1, vec2(fract(bl_frag_x), (fract(bl_frag_y * -1.0) * surface_h) + surface_h + texture_start));
        }
    } 