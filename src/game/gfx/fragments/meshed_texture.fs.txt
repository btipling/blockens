    // This is a fragment shader for a meshed chunk of voxels. The textures are sprites of 16x16 voxels
    // for 3 surfaces, top, sides and bottom stack down the texture. The mesh is scaled for a block type
    // into dimensions that increment the model space vertices via integers. To make the texture sprites
    // map and repeat correctly, the texture coordinates are scaled by the block type dimensions. This will
    // be done by reducing the fragPos to a 0-1 range, by removing the integer part of the position.
    // Then the texture coordinates will be manually interpolated by the fragPos. The texture is part of
    // a texture atlas.

    // This also handles lighting values for each of the surfaces.

    // These variables must be defined elsehwere:
    // textColor
    // bl_surface_height
    // fragNormal
    // bl_amb_frag
    // bl_block_ambient

    float surface_h = bl_surface_height;
    float surface_t = bl_surface_height * 2;
    float texture_start = surface_h * 3 * bl_block_index;
    float bl_frag_x = fragPos.x;
    float bl_frag_y = fragPos.y;
    float bl_frag_z = fragPos.z;
    // bl_block_ambient has 12 bits of data. 2 bits are extracted per surface
    float bl_as = 1.0; // ambient surface value
    if (abs(fragNormal.x) > 0.5) {
        // side of voxel
        if (fragNormal.x > 0) {
            // right
            textColor = texture(texture1, vec2(fract(bl_frag_z), (fract(bl_frag_y * -1.0) * surface_h) + surface_h + texture_start));
            // xx00 0000 0000
            bl_as = float((bl_block_ambient & 0xC00u) >> 10)/3;
        } else {
            // left
            textColor = texture(texture1, vec2(fract(bl_frag_z * -1.0), (fract(bl_frag_y * -1.0) * surface_h) + surface_h + texture_start));
             // 00xx 0000 0000
            bl_as = float((bl_block_ambient & 0x300u) >> 8)/3;
        }
    } else if (abs(fragNormal.y) > 0.5) {
        // top or bottom of voxel
        if (fragNormal.y > 0) {
            // top
            textColor = texture(texture1, vec2(fract(bl_frag_x), (fract(bl_frag_z * -1.0) * surface_h) + texture_start));
             // 0000 xx00 0000
            bl_as = float((bl_block_ambient & 0xC0u) >> 6)/3;
        } else {
            // bottom
            textColor = texture(texture1, vec2(fract(bl_frag_x), (fract(bl_frag_z * -1.0) * surface_h) + surface_t + texture_start));
             // 0000 00xx 0000
            bl_as = float((bl_block_ambient & 0x30u) >> 4)/3;
        }
    } else {
        // front or back of voxel
        if (fragNormal.z > 0) {
            // front
            textColor = texture(texture1, vec2(fract(bl_frag_x * -1.0), (fract(bl_frag_y * -1.0) * surface_h) + surface_h + texture_start));
             // 0000 0000 xx00
            bl_as = float((bl_block_ambient & 0xCu) >> 2)/3;
        } else {
            // back
            textColor = texture(texture1, vec2(fract(bl_frag_x), (fract(bl_frag_y * -1.0) * surface_h) + surface_h + texture_start));
             // 0000 0000 00xx
            bl_as = float((bl_block_ambient & 0x3u))/3;
        }
    } 
    float bl_as_min = 0.15;
    if (bl_as < bl_as_min) {
        bl_as = bl_as_min; // Don't want completely black.
    }
    bl_amb_frag = bl_amb_frag * vec4(bl_as, bl_as, bl_as, 1);
